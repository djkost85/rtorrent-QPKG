#!/bin/sh
#
# = QPX Framework, Version 0.1.7
#
# Author: Silas Mariusz <silas@qnap.....pl>
#                       <          club   >
# Version: v1.2
#
# == DESCRIPTION:
# QPX Trap and Debug Functions library
#
# == LICENSE:
# (OpenBSD license based)
# QPX Lincense, Version 1.0
#
# Copyright (c) 2011-2013 Silas Mariusz Grzybacz.  All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#  This product includes whole or part(s) of the QPX Framework software
#  designed for QNAP Systems, Inc., QTS4 QPKG platform and ownership
#  of copyright remains with the author Silas Mariusz Grzybacz.
# 4. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.

# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# ======================================================================
# This software consists of voluntary contributions made by many
# individuals on behalf of the community QTS4 Features Researches
# and was originally based on software copyright (c) 2008/2009,
# QNAP Systems, Inc., with Headquartered in Taipei
# information on the QTS4 QPKG and product, please see
# <http://www.qnap.com/>.
#


_PLIBNAME="trap" ; _PLIB_version="0.1.2"
_PLIBDESC="Trap and Debug Functions library"


##### INIT NAMES #####
: ${QPROJECT:="QPX"}
_QPXNAME="${QPROJECT}/${_PLIBNAME}" ; _QPXALT="${_QPXNAME}"


##### LOAD ONLY ONCE #####
[ ! -z "$(eval echo \"\$QPX_l${_PLIBNAME}\")" ] && {
        echo "${_QPXNAME}, Version ${_PLIB_version} already started!"
        exit 1
} || {
        echo "Library ${_QPXNAME}, Version ${_PLIB_version} is loading right now..."
        eval QPX_l${_PLIBNAME}="${_PLIB_version}"
        export QPX_l${_PLIBNAME}
}


##### DEBUG MISC SETTINGS #####
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }' ; export PS4
: ${DEBUG:=0}
if [ ${DEBUG} = 1 ]; then
        set -v  # verbose (Prints shell input lines as they are read.)
        set -x  # xtrace (Print command traces before executing command.)
fi


##### NOW #####
NOW="date +%Y.%m.%d-%H:%M:%S.%N" # out:2013.03.07-05:22:10.417747339
NYW="date +%H:%M:%S.%N" # out:05:22:43.187654705


##### Command definitions #####
CMD_AWK="/bin/awk"
CMD_CAT="/bin/cat"
CMD_CHMOD="/bin/chmod"
CMD_CHOWN="/bin/chown"
CMD_CP="/bin/cp"
CMD_CUT="/bin/cut"
CMD_DATE="/bin/date"
CMD_ECHO="/bin/echo"
CMD_EXPR="/usr/bin/expr"
CMD_FIND="/usr/bin/find"
CMD_GETCFG="/sbin/getcfg"
CMD_GREP="/bin/grep"
CMD_GZIP="/bin/gzip"
CMD_HOSTNAME="/bin/hostname"
CMD_LN="/bin/ln"
CMD_LOG_TOOL="/sbin/log_tool"
CMD_MD5SUM="/bin/md5sum"
CMD_MKDIR="/bin/mkdir"
CMD_MV="/bin/mv"
CMD_PIC_RAW="/sbin/pic_raw"
CMD_READLINK="/usr/bin/readlink"
CMD_RM="/bin/rm"
CMD_RMDIR="/bin/rmdir"
CMD_SED="/bin/sed"
CMD_SETCFG="/sbin/setcfg"
CMD_SLEEP="/bin/sleep"
CMD_SORT="/usr/bin/sort"
CMD_SYNC="/bin/sync"
CMD_TAR="/bin/tar"
CMD_TEE="/usr/bin/tee"
CMD_TOUCH="/bin/touch"
CMD_WGET="/usr/bin/wget"
CMD_WLOG="/sbin/write_log"
CMD_XARGS="/usr/bin/xargs"
CMD_7Z="/usr/local/sbin/7z"


esc="\033"
case $TERM in
        *xterm* | dtterm | *vt100* | *linux* | *cyg*) # Foreground Colors
                blackf="${esc}[30m" ;   redf="${esc}[31m" ;     greenf="${esc}[32m" ;   yellowf="${esc}[33m" ;
                bluef="${esc}[34m" ;    purplef="${esc}[35m" ;  cyanf="${esc}[36m" ;    whitef="${esc}[37m" ;
                # Background Colors
                blackb="${esc}[40m" ;   redb="${esc}[41m" ;     greenb="${esc}[42m" ;   yellowb="${esc}[43m" ;
                blueb="${esc}[44m" ;    purpleb="${esc}[45m" ;  cyanb="${esc}[46m" ;    whiteb="${esc}[47m" ;
                # Styles
                boldon="${esc}[1m" ;    boldoff="${esc}[22m" ;          # Bold
                italicson="${esc}[3m" ; italicsoff="${esc}[23m" ;       # Italic
                ulon="${esc}[4m" ;      uloff="${esc}[24m" ;            # Underline
                invon="${esc}[7m" ;     invoff="${esc}[27m" ;           # Invert

                nc="${esc}[0m" ;

                # Pre-defined styles
                alert=${whitef}${redb} # White on red background
                error=${blackf}${redb} # Black on red background
                warn=${blackf}${yellowb} # Black on yellow background
                noerr=${blackf}${greenb} # Black on yellow background
        ;;
        *)
                blackf="" redf="" greenf="" yellowf="" bluef="" purplef="" cyanf="" whitef=""
                blackb="" redb="" greenb="" yellowb="" blueb="" purpleb="" cyanb="" whiteb=""
                italicson="" italicsoff="" ulon="" uloff="" invon="" invoff=""
                alert="" error="" warn="" noerr=""
        ;;
        esac
if command -v "tput" >/dev/null 2>&1; then
        #boldon=$(tput smso) ; boldoff=$(tput rmso)
        #boldon=$(tput bold) ;
        :
else
        boldon="" ; boldoff="" ; echo dupa
fi


##### Script Essentials #####
PROGNAME=`type $0 | awk '{print $3}'`       # search for executable on path
$CMD_ECHO -e " [ ${cyanf}${_QPXNAME}${nc} ] ${_PLIBDESC} $($NOW)"

PROGDIR=`dirname $PROGNAME`                 # extract directory of program
PROGNAME=`basename $PROGNAME`               # base name of program

[ -L "${PROGDIR}/${PROGNAME}" ] && {
        _SLINK=$(readlink ${PROGDIR}/${PROGNAME})
        $CMD_ECHO -e " [ ${yellowf}${_QPXNAME}${nc} ] ! Execution from Symbolic Link
- from: ${PROGDIR}/${PROGNAME}
-   to: ${_SLINK}"
        PROGDIR=`dirname ${_SLINK}`
        PROGNAME=`basename ${_SLINK}`
}

# Fully qualify directory path (remove relative components and symlinks)
# WARNING: The "bash" "pwd" builtin does not resolve symbolic links
# "sh" (as a link to "bash") also does not,   but "csh" does handle it.
# Symbolic link removal however is not critical.
ORIGDIR=`pwd`                             # original directory (builtin)
PROGDIR=`cd $PROGDIR && pwd || echo $PROGDIR` # program directory

# Results...
#    $ORIGDIR    -- where the users was when called
#    $PROGDIR    -- script directory location (and now current directory)
#    $PROGNAME   -- This scripts executable name


##### Say Hello #####
$CMD_ECHO -e " [ ${cyanf}${_QPXNAME}${nc} ] Base: $0"
$CMD_ECHO -e " [ ${cyanf}${_QPXNAME}${nc} ] Execution path : $ORIGDIR"
$CMD_ECHO -e " [ ${cyanf}${_QPXNAME}${nc} ] Script location: $PROGDIR"


##### System definitions #####
SYS_PWD_DIR="$(pwd)"
SYS_CONFIG_DIR="/etc/config"
SYS_INIT_DIR="/etc/init.d"
SYS_STARTUP_DIR="/etc/rcS.d"
SYS_SHUTDOWN_DIR="/etc/rcK.d"
SYS_RSS_IMG_DIR="/home/httpd/RSS/images"
SYS_QPKG_CONFIG_FILE="$SYS_CONFIG_DIR/qpkg.conf"
SYS_HOSTNAME=$($CMD_HOSTNAME)




























stderr="${PROGDIR}/${QPROJECT}-stderr.log"


##### EXECUTION AND DEBUG SETTINGS #####
set -o pipefail  # trace ERR through pipes
set -o errtrace  # trace ERR through 'time command' and other functions
set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable
set -o errexit   ## set -e : exit the script if any statement returns a non-true return value


##### LOG STDERR #####
exec 2>"$stderr"


##### EXIT HANDLER #####
function exit_handler ()
{
        local error_code="$?"

        test $error_code == 0 && return;

        local i=0
        local regex=''
        local mem=''

        local error_file=''
        local error_lineno=''
        local error_message='unknown'

        local lineno=''


        # is color terminal? then make the rainbow...
        test -t 1 && if command -v "tput" >/dev/null 2>&1; then
                tput bold; tput setf 4
        fi
        echo -e "\n(!) EXIT HANDLER:\n"

        # get last err
        if test -f "$stderr"
        then
                stderr=$( tail -n 1 "$stderr" )
                rm "$stderr"
        fi

        # from log line
        if test -n "$stderr"
        then
                # exploding stderr on :
                mem="$IFS"
                local shrunk_stderr=$( echo "$stderr" | sed 's/\: /\:/g' )
                IFS=':'
                local stderr_parts=( $shrunk_stderr )
                IFS="$mem"

                # storing information on the error
                error_file="${stderr_parts[0]}"
                error_lineno="${stderr_parts[1]}"
                error_message=""

                for (( i = 3; i <= ${#stderr_parts[@]}; i++ ))
                do
                        error_message="$error_message "${stderr_parts[$i-1]}": "
                done

                # removing last ':' (colon character)
                error_message="${error_message%:*}"

                # trim
                error_message="$( echo "$error_message" | sed -e 's/^[ \t]*//' | sed -e 's/[ \t]*$//' )"
        fi

        # find and use backtrace
        if command -v "backtrace" >/dev/null 2>&1; then
                _backtrace=$( backtrace 2 )
        fi

        # make output
        local lineno=""
        regex='^([a-z]{1,}) ([0-9]{1,})$'

        if [[ $error_lineno =~ $regex ]]
        # the error line was found on the log
        then
                local row="${BASH_REMATCH[1]}"
                lineno="${BASH_REMATCH[2]}"

                echo -e "FILE:\t\t${error_file}"
                echo -e "${row^^}:\t\t${lineno}\n"

                echo -e "ERROR CODE:\t${error_code}"
                test -t 1 && if command -v "tput" >/dev/null 2>&1; then
                        tput setf 6 ## white yellow
                fi
                echo -e "ERROR MESSAGE:\n$error_message"
        else
                regex="^${error_file}\$|^${error_file}\s+|\s+${error_file}\s+|\s+${error_file}\$"
                if [[ "$_backtrace" =~ $regex ]]

                # The file was found on the log but not the error line
                # (could not reproduce this case so far)
                # ------------------------------------------------------
                then
                    echo -e "FILE:\t\t$error_file"
                    echo -e "ROW:\t\tunknown\n"

                    echo -e "ERROR CODE:\t${error_code}"
                    test -t 1 && tput setf 6                            ## white yellow
                    echo -e "ERROR MESSAGE:\n${stderr}"

                # Neither the error line nor the error file was found on the log
                # (e.g. type 'cp ffd fdf' without quotes wherever)
                # ------------------------------------------------------
                else
                    #
                    # The error file is the first on backtrace list:

                    # Exploding backtrace on newlines
                    mem=$IFS
                    IFS='
                    '
                    #
                    # Substring: I keep only the carriage return
                    # (others needed only for tabbing purpose)
                    IFS=${IFS:0:1}
                    local lines=( $_backtrace )

                    IFS=$mem

                    error_file=""

                    if test -n "${lines[1]}"
                        then
                            array=( ${lines[1]} )

                            for (( i=2; i<${#array[@]}; i++ ))
                                do
                                    error_file="$error_file ${array[$i]}"
                            done

                            # Trim
                            error_file="$( echo "$error_file" | sed -e 's/^[ \t]*//' | sed -e 's/[ \t]*$//' )"
                    fi

                    echo -e "FILE:\t\t$error_file"
                    echo -e "ROW:\t\tunknown\n"

                    echo -e "ERROR CODE:\t${error_code}"
                    test -t 1 && tput setf 6                            ## white yellow
                    if test -n "${stderr}"
                        then
                            echo -e "ERROR MESSAGE:\n${stderr}"
                        else
                            echo -e "ERROR MESSAGE:\n${error_message}"
                    fi
            fi
    fi

    #
    # PRINTING THE BACKTRACE:
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

    test -t 1 && tput setf 7                                            ## white bold
    echo -e "\n$_backtrace\n"

    #
    # EXITING:
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

    test -t 1 && tput setf 4                                            ## red bold
    echo "Exiting!"

    test -t 1 && tput sgr0 # Reset terminal

    exit "$error_code"
}
trap exit_handler EXIT                                                  # ! ! ! TRAP EXIT ! ! !
trap exit ERR                                                           # ! ! ! TRAP ERR ! ! !


###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
#
# FUNCTION: BACKTRACE
#
###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##

function backtrace
{
    local _start_from_=0

    local params=( "$@" )
    if (( "${#params[@]}" >= "1" ))
        then
            _start_from_="$1"
    fi

    local i=0
    local first=false
    while caller $i > /dev/null
    do
        if test -n "$_start_from_" && (( "$i" + 1   >= "$_start_from_" ))
            then
                if test "$first" == false
                    then
                        echo "BACKTRACE IS:"
                        first=true
                fi
                caller $i
        fi
        let "i=i+1"
    done
}

return 0


