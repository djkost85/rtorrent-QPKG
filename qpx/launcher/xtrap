#!/bin/sh


_PLIBNAME="trap" ; _PLIB_version="0.1.2"
_PLIBDESC="Trap and Debug Functions library"


##### INIT NAMES #####
: ${QPROJECT:="QPX"}
_QPXNAME="${QPROJECT}/${_PLIBNAME}" ; _QPXALT="${_QPXNAME}"


##### LOAD ONLY ONCE #####
[ ! -z "$(eval echo \"\$QPX_l${_PLIBNAME}\")" ] && {
        echo "${_QPXNAME}, Version ${_PLIB_version} already started!"
        exit 1
} || {
        echo "Library ${_QPXNAME}, Version ${_PLIB_version} is loading right now..."
        eval QPX_l${_PLIBNAME}="${_PLIB_version}"
        export QPX_l${_PLIBNAME}
}


##### DEBUG MISC SETTINGS #####
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }' ; export PS4
: ${DEBUG:=0}


##### NOW #####
NOW="date +%Y.%m.%d-%H:%M:%S.%N" # out:2013.03.07-05:22:10.417747339
NYW="date +%H:%M:%S.%N" # out:05:22:43.187654705
NOW_LOG="date +%Y%m%d-%H%M%S.%N" # out:20130307-052210.417747339





stderr="$LOGFILE.stderr"


##### EXECUTION AND DEBUG SETTINGS #####
set -o pipefail  # trace ERR through pipes
#set -o errtrace  # trace ERR through 'time command' and other functions
#set -o nounset   ## set -u : exit the script if you try to use an uninitialised variable
#set -o errexit   ## set -e : exit the script if any statement returns a non-true return value


##### LOG STDERR #####
exec 2>"$stderr"


##### EXIT HANDLER #####
function exit_handler ()
{
        local error_code="$?"

        test $error_code == 0 && return;

        local i=0
        local regex=''
        local mem=''

        local error_file=''
        local error_lineno=''
        local error_message='unknown'

        local lineno=''


        echo -e "\n  ${bd}${red}(!)${nc} ${red}EXIT HANDLER${nc}:\n"

        # get last err
        if test -f "$stderr"
        then
                stderr=$( tail -n 1 "$stderr" )
                rm "$stderr"
        fi

        # from log line
        if test -n "$stderr"
        then
                # exploding stderr on :
                mem="$IFS"
                local shrunk_stderr=$( echo "$stderr" | sed 's/\: /\:/g' )
                IFS=':'
                local stderr_parts=( $shrunk_stderr )
                IFS="$mem"

                # storing information on the error
                error_file="${stderr_parts[0]}"
                error_lineno="${stderr_parts[1]}"
                error_message=""

                for (( i = 3; i <= ${#stderr_parts[@]}; i++ ))
                do
                        error_message="$error_message "${stderr_parts[$i-1]}": "
                done

                # removing last ':' (colon character)
                error_message="${error_message%:*}"

                # trim
                error_message="$( echo "$error_message" | sed -e 's/^[ \t]*//' | sed -e 's/[ \t]*$//' )"
        fi

        # find and use backtrace
        if command -v "backtrace" >/dev/null 2>&1; then
                _backtrace=$( backtrace 2 )
        fi

        # make output
        local lineno=""
        regex='^([a-z]{1,}) ([0-9]{1,})$'

        if [[ $error_lineno =~ $regex ]]
        # the error line was found on the log
        then
                local row="${BASH_REMATCH[1]}"
                lineno="${BASH_REMATCH[2]}"

                echo -e "FILE:\t\t${error_file}${nc}"
                echo -e "${row^^}:\t\t${lineno}${nc}\n"

                echo -e "${bd}${red}ERROR CODE${nc}:\t${yellow}${error_code}${nc}"
                echo -e "${bd}${red}ERROR MESSAGE${nc}:\n${yellow}$error_message${nc}"
        else
                regex="^${error_file}\$|^${error_file}\s+|\s+${error_file}\s+|\s+${error_file}\$"
                if [[ "$_backtrace" =~ $regex ]]

                # The file was found on the log but not the error line
                # (could not reproduce this case so far)
                # ------------------------------------------------------
                then
                    echo -e "FILE:\t\t${yellow}$error_file${nc}"
                    echo -e "ROW:\t\t${yellow}unknown${nc}\n"

                    echo -e "${bd}${red}ERROR CODE${nc}:\t${yellow}${error_code}${nc}"
                    echo -e "${bd}${red}ERROR MESSAGE${nc}:\n${yellow}${stderr}${nc}"

                # Neither the error line nor the error file was found on the log
                # (e.g. type 'cp ffd fdf' without quotes wherever)
                # ------------------------------------------------------
                else
                    #
                    # The error file is the first on backtrace list:

                    # Exploding backtrace on newlines
                    mem=$IFS
                    IFS='
                    '
                    #
                    # Substring: I keep only the carriage return
                    # (others needed only for tabbing purpose)
                    IFS=${IFS:0:1}
                    local lines=( $_backtrace )

                    IFS=$mem

                    error_file=""

                    if test -n "${lines[1]}"
                        then
                            array=( ${lines[1]} )

                            for (( i=2; i<${#array[@]}; i++ ))
                                do
                                    error_file="$error_file ${array[$i]}"
                            done

                            # Trim
                            error_file="$( echo "$error_file" | sed -e 's/^[ \t]*//' | sed -e 's/[ \t]*$//' )"
                    fi

                    echo -e "FILE:\t\t$error_file"
                    echo -e "ROW:\t\tunknown\n"

                    echo -e "${bd}${red}ERROR CODE${nc}:\t${yellow}${error_code}${nc}"
                    if test -n "${stderr}"
                        then
                            echo -e "${bd}${red}ERROR MESSAGE${nc}:\n${yellow}${stderr}${nc}"
                        else
                            echo -e "${bd}${red}ERROR MESSAGE${nc}:\n${yellow}${error_message}${nc}"
                    fi
            fi
    fi

    #
    # PRINTING THE BACKTRACE:
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

    echo -e "\n${bd}${white}$_backtrace${nc}\n"

    #
    # EXITING:
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

    echo "${bd}${red}Exiting!${nc}"
    exit "$error_code"

}
trap exit_handler EXIT                                                  # ! ! ! TRAP EXIT ! ! !
trap exit ERR                                                           # ! ! ! TRAP ERR ! ! !


###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##
#
# FUNCTION: BACKTRACE
#
###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~##

function backtrace
{
    local _start_from_=0

    local params=( "$@" )
    if (( "${#params[@]}" >= "1" ))
        then
            _start_from_="$1"
    fi

    local i=0
    local first=false
    while caller $i > /dev/null
    do
        if test -n "$_start_from_" && (( "$i" + 1   >= "$_start_from_" ))
            then
                if test "$first" == false
                    then
                        echo "BACKTRACE IS:"
                        first=true
                fi
                caller $i
        fi
        let "i=i+1"
    done
}

return 0


